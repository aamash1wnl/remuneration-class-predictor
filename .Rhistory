colnames(adult)
adult <- apply(adult, func6)
func6(adult)
unc6 <- function(df){
for (i in colnames(df)){
for (j in seq_along(df$i)){
if (df$i[j] %in% c('?',' ?','? ')){
df$i[j] <- NULL
}
}
}
return (df)
}
func6(adult)
func6(adult)
unc6 <- function(df){
for (i in colnames(df)){
for (j in seq_along(df$i)){
if (df$i[j] %in% c('?',' ?','? ')){
df$i[j] <- NULL
}
}
}
return (df)
}
func6(adult)
func7(adult)
func6 <- function(df){
for (i in colnames(df)){
for (j in seq_along(df$i)){
if (df$i[j] %in% c('?',' ?','? ')){
df$i[j] <- NULL
}
}
}
return (df)
}
func6(adult)
source("~/.active-rstudio-document")
table(adult$marital)
table(adult$type_employer)
adult <- func6(adult)
table(adult$type_employer)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
nc6 <- function(df){
for (i in colnames(df)){
df[[i]] <- ifelse(df[[i]] %in% c('?', ' ?', '? '), NA, df[[i]])
}
return(df)
}
adult <- func6(adult)
source("~/.active-rstudio-document")
table(adult$type_employer)
source("~/.active-rstudio-document")
table(adult$type_employer)
func6 <- function(df) {
for (i in colnames(df)) {
for (j in seq_along(df[[i])) {
func6 <- function(df) {
for (i in colnames(df)) {
for (j in seq_along(df[[i]])) {
if (df[[i]][j] %in% c('?', ' ?', '? ')) {
df[[i]][j] <- NA
}
}
}
return(df)
}
adult <- func6(adult)
table(adult$type_employer)
missmap(adult)
# missmap function allows to visualize missing data in the dataset
missmap(adult,y.at=c(1),y.labels = c(''),col=c('yellow','black'))
adult <- na.omit(adult)
str(adult)
missmap(adult,y.at=c(1),y.labels = c(''),col=c('yellow','black'))
str(adult)
library(ggplot2)
ggplot(adult, aes(x=age, y=count)) + geom_histogram(aes(color=income))
ggplot(adult, aes(x=age, y=count)) + geom_histogram(aes(color='income'))
ggplot(adult, aes(x=age, y=count)) + geom_histogram(color=income)
ggplot(adult, aes(x=age, y=count)) + geom_histogram(color='income')
ggplot(adult, aes(x=age, y=count)) + geom_histogram()
ggplot(adult, aes(x=age)) + geom_histogram()
ggplot(adult, aes(x=age),colors=income)) + geom_histogram()
ggplot(adult, aes(x=age),colors=income) + geom_histogram()
ggplot(adult, aes(x=age),colors=income) + geom_histogram(colors=income)
ggplot(adult, aes(x=age),colors=income) + geom_histogram(colors=income)
ggplot(adult, aes(x=age),colors=income) + geom_histogram(colors='income')
ggplot(adult, aes(x=age),colors=income) + geom_histogram(colours='income')
ggplot(adult, aes(x=age),colors=income) + geom_histogram(colors='income')
ggplot(adult, aes(x=age),colors=income) + geom_histogram(aes(colors='income'))
ggplot(adult, aes(x=age),colors=income) + geom_histogram()
ggplot(adult, aes(x=age),colors=income) + geom_histogram(aes(fill=income)))
ggplot(adult, aes(x=age),colors=income) + geom_histogram(aes(fill=income))
ggplot(adult, aes(x=age),colors=income) + geom_histogram(aes(fill=income),color='black')
ggplot(adult, aes(x=age),colors=income) + geom_histogram(aes(fill=income),color='black',binwidth = 1)
ggplot(adult, aes(x=hours),colors=income) + geom_histogram(color='black',binwidth = 1)
ggplot(adult, aes(x=hr_per_week),colors=income) + geom_histogram(color='black',binwidth = 1)
ggplot(adult, aes(x=age),colors=income) + geom_histogram(aes(fill=income),color='black',binwidth = 1) + theme_bw()
ggplot(adult, aes(x=hr_per_week),colors=income) + geom_histogram(color='black',binwidth = 1) + theme_classic()
ggplot(adult, aes(x=hr_per_week),colors=income) + geom_histogram(color='black',binwidth = 1) + theme_minimal()
classic()
ggplot(adult, aes(x=hr_per_week),colors=income) + geom_histogram(color='black',binwidth = 1) + theme_classic()
ggplot(adult, aes(x=hr_per_week),colors=income) + geom_histogram(color='black',binwidth = 1) + theme_bw()
colnamed(adult)
print(colnamed(adult))
print(colnames(adult))
print(colnames(adult)[14])
colnames(adult)[14] <- 'Region'
ggplot(adult, aes(x=region)) + geom_histogram(aes(fill=income),color='black',binwidth = 1) + theme_bw()
print(colnames(adult))
ggplot(adult, aes(x=Region)) + geom_histogram(aes(fill=income),color='black',binwidth = 1) + theme_bw()
ggplot(adult, aes(x=Region)) + geom_bar(aes(fill=income),color='black',binwidth = 1) + theme_bw()
ggplot(adult, aes(x=Region),) + geom_bar(aes(fill=income),color='black',binwidth = 1,) + theme_bw() + theme(axis.x.test = element_text(angle = 90, hjust=2))
ggplot(adult, aes(x=Region),) + geom_bar(aes(fill=income),color='black',binwidth = 1) + theme_bw() + theme(axis.x.test = element_text(angle = 90, hjust=2))
ggplot(adult, aes(x=Region),) + geom_bar(aes(fill=income),color='black',binwidth = 1) + theme_bw() + theme(axis.text.x = element_text(angle = 90, hjust=2))
ggplot(adult, aes(x=Region),) + geom_bar(aes(fill=income),color='black',binwidth = 1) + theme_bw() + theme(axis.text.x = element_text(angle = 90, hjust=-2))
ggplot(adult, aes(x=Region),) + geom_bar(aes(fill=income),color='black',binwidth = 1) + theme_bw() + theme(axis.text.x = element_text(angle = 90, hjust=1))
ggplot(adult, aes(x=Region),) + geom_bar(aes(fill=income),color='black',binwidth = 1) + theme_bw() + theme(axis.text.x = element_text(angle = 90, hjust=0.5))
ggplot(adult, aes(x=Region),) + geom_bar(aes(fill=income),color='black',binwidth = 1) + theme_bw() + theme(axis.text.x = element_text(angle = 90))
ggplot(adult, aes(x=Region),) + geom_bar(aes(fill=income),color='black',binwidth = 1) + theme_bw() + theme(axis.text.x = element_text(angle = 90, hjust=1))
ggplot(adult, aes(x=Region),) + geom_bar(aes(fill=income),color='black',binwidth = 1) + theme_bw() + theme(axis.text.x = element_text(angle = 90, hjust=1))
ggplot(adult, aes(x=Region),) + geom_bar(aes(fill=income),color='black') + theme_bw() + theme(axis.text.x = element_text(angle = 90, hjust=1))
head(adult)
r
ggplot(adult, aes(x=age),colors=income) + geom_histogram(aes(fill=income),color='black',binwidth = 1) + theme_bw()
ggplot(adult, aes(x=age)) + geom_histogram(aes(fill=income),color='black',binwidth = 1) + theme_bw()
head(adult)
library(caTools)
sample <- sample.split(adult$age, SplitRatio = 0.7)
test <- subset(adult, sample==F)
train <- subset(adult, sample==T)
glm <- glm(income ~ ., family = binomial('logit'), data = train)
glm <- glm(income ~ ., family = binomial(logit), data = train)
glm <- glm(income ~ ., family = binomial(logit), data = train)
func7 <- function(col1) {
for (i in seq_along(col1)) {
if (col1[i] %in% c('<=50K')) {
col1[i] <- 0
}
if (col1[i] %in% c('>50K')) {
col1[i] <- 1
}
}
return(col1)
}
adult2 <- sapply(income, func7)
adult2 <- sapply('income', func7)
str(adult2)
adult2 <- adult
adult2 <- sapply(adult2$income, func7)
str(adult2)
adult2 <- adult
str(adult)
str(adult2)
adult2$income <- sapply(adult2$income, func7)
str(adult2)
)
sample <- sample.split(adult2$age, SplitRatio = 0.7)
train <- subset(adult2, sample==T)
test <- subset(adult2, sample==F)
glm <- glm(income ~ ., family = binomial(logit), data = train)
model <- glm(income ~ ., family = binomial(logit), data = train)
model = glm(income ~ ., family = binomial(logit), data = train)
View(adult2)
str(adult2)
source("D:/Courses/R DS & ML/pracs/ML projects/Logistic regression/proj_.R")
source("D:/Courses/R DS & ML/pracs/ML projects/Logistic regression/proj_.R")
summary(model)
model.2 <- step(model)
predict.glm(model.2, type='response')
predict.lm(model.2, type='response')
predict.lm(model.2, newdata = test, type='response')
predict.lm(model, newdata = test, type='response')
test$predicted.income <- predict.lm(model, newdata = test, type='response')
table(test$predicted.income > 0.5, test$income)
print(acc)
acc <- (6670+1094)/ (6670+1188+266+1094)
print(acc)
acc <- (6670+1094) / (6670+1188+266+1094)
acc <- (6670+1094) / (6670+1188+266+1094)
print(acc)
print('Accuracy: ', accuracy,'\nRecall: ',recall, '\Precision: ',precision)
print('Accuracy: ', accuracy,'\nRecall: ',recall, '\nPrecision: ',precision)
accuracy <- (6670+1094) / (6670+1188+266+1094)
print('Accuracy: ', accuracy,'\nRecall: ',recall, '\nPrecision: ',precision)
precision <- (6670) / (6670 + 266)
print('Accuracy: ', accuracy,'\nRecall: ',recall, '\nPrecision: ',precision)
recall <- (6670)/(6670+1188)
precision <- (6670) / (6670 + 266)
print('Accuracy: ', accuracy,'\nRecall: ',recall, '\nPrecision: ',precision)
print('Recall: ',recall)
print('Accuracy: ', accuracy)
print('Accuracy: ' accuracy)
print('Accuracy: ', accuracy)
print(paste('Recall: ', recall))
print(paste('Precision: ', precision))
print(paste('Accuracy: ', accuracy))
print(paste('Precision:', precision))
# Load required libraries
library(dplyr)
library(Amelia)
library(ggplot2)
library(caTools)
# Read data and display head
adult <- read.csv('adult_sal.csv')
head(adult)
# Remove unnecessary column 'X'
adult <- select(adult, -X)
head(adult)
# Explore the structure and summary of the dataset
str(adult)
summary(adult)
# Handling missing values in 'type_employer'
table(adult$type_employer)
sum(is.na(adult$type_employer))
# Define functions to reclassify values in 'type_employer' and apply them
func1 <- function(col1) { col1 %>% recode('Never-worked'='Unemployed', 'Without-pay'='Unemployed') }
func2 <- function(col1) { col1 %>% recode('State-gov'='SL-gov', 'Local-gov'='SL-gov') }
func3 <- function(col1) { col1 %>% recode('Self-emp-inc'='self-emp', 'Self-emp-not-inc'='self-emp') }
adult$type_employer <- adult$type_employer %>% func1() %>% func2() %>% func3()
# Display the updated distribution
table(adult$type_employer)
# Reclassify values in 'marital' column
table(adult$marital)
func4 <- function(col1) {
col1 %>% recode('Married-AF-spouse'='Married', 'Married-civ-spouse'='Married', 'Married-spouse-absent'='Married',
'Divorced'='Not-Married', 'Separated'='Not-Married', 'Widowed'='Not-Married')
}
adult$marital <- adult$marital %>% func4()
table(adult$marital)
# Reclassify values in 'country' column
table(adult$country)
func5 <- function(country) {
# Define country groups
asia <- c('Cambodia', 'China', 'Hong', 'India', 'Iran', 'Japan', 'Laos', 'Philippines', 'Taiwan', 'Thailand', 'Vietnam')
# ... (similarly for other regions)
# Apply the function
ifelse(country %in% asia, 'Asia', ifelse(country %in% europe, 'Europe',
ifelse(country %in% latin_and_south_america, 'Latin.and.South.America',
ifelse(country %in% north_america, 'North.America',
ifelse(country %in% other, 'Other', 'Unknown')))))
}
adult$country <- adult$country %>% sapply(func5)
# Load necessary libraries
library(dplyr)
library(Amelia)
library(ggplot2)
library(caTools)
# Read the CSV file
adult <- read.csv('adult_sal.csv')
# View the first few rows of the dataset
head(adult)
# Remove unnecessary column 'X'
adult <- select(adult, -X)
# Display the structure and summary of the dataset
str(adult)
summary(adult)
# Explore and handle missing values in 'type_employer' column
table(adult$type_employer)
sum(is.na(adult$type_employer))
# Create functions to recode 'type_employer' values
func1 <- function(col1) {
col1[col1 %in% c('Never-worked', 'Without-pay')] <- 'Unemployed'
return(col1)
}
func2 <- function(col1) {
col1[col1 %in% c('State-gov', 'Local-gov')] <- 'SL-gov'
return(col1)
}
func3 <- function(col1) {
col1[col1 %in% c('Self-emp-inc', 'Self-emp-not-inc')] <- 'self-emp'
return(col1)
}
# Apply the functions to 'type_employer'
adult$type_employer <- sapply(adult$type_employer, func1)
adult$type_employer <- sapply(adult$type_employer, func2)
adult$type_employer <- sapply(adult$type_employer, func3)
# Display the updated table
table(adult$type_employer)
# Explore and handle missing values in 'marital' column
table(adult$marital)
# Create function to recode 'marital' values
func4 <- function(col1) {
col1[col1 %in% c('Married-AF-spouse', 'Married-civ-spouse', 'Married-spouse-absent')] <- 'Married'
col1[col1 %in% c('Divorced', 'Separated', 'Widowed')] <- 'Not-Married'
return(col1)
}
# Apply the function to 'marital'
adult$marital <- sapply(adult$marital, func4)
# Display the updated table
table(adult$marital)
# Explore and handle missing values in 'country' column
table(adult$country)
# Create function to recode 'country' values
func5 <- function(country) {
# Define categories for different regions
asia <- c('Cambodia', 'China', 'Hong', 'India', 'Iran', 'Japan', 'Laos', 'Philippines', 'Taiwan', 'Thailand', 'Vietnam')
europe <- c('England', 'France', 'Germany', 'Greece', 'Hungary', 'Ireland', 'Italy', 'Poland', 'Portugal', 'Scotland', 'Yugoslavia')
latin_and_south_america <- c('Columbia', 'Cuba', 'Dominican-Republic', 'Ecuador', 'El-Salvador', 'Guatemala', 'Haiti', 'Honduras', 'Mexico', 'Nicaragua', 'Peru', 'Trinadad&Tobago')
north_america <- c('Canada', 'United-States')
other <- c('?', 'Holand-Netherlands', 'Outlying-US(Guam-USVI-etc)', 'Puerto-Rico')
# Recode 'country' values based on regions
if (country %in% asia) {
return('Asia')
} else if (country %in% europe) {
return('Europe')
} else if (country %in% latin_and_south_america) {
return('Latin.and.South.America')
} else if (country %in% north_america) {
return('North.America')
} else if (country %in% other) {
return('Other')
} else {
return('Unknown')
}
}
# Apply the function to 'country'
adult$country <- sapply(adult$country, func5)
# Display the updated table
table(adult$country)
# Convert categorical variables to factors
str(adult)
adult$marital <- sapply(adult$marital, factor)
adult$education <- sapply(adult$education, factor)
adult$occupation <- sapply(adult$occupation, factor)
adult$relationship <- sapply(adult$relationship, factor)
adult$race <- sapply(adult$race, factor)
adult$sex <- sapply(adult$sex, factor)
adult$type_employer <- sapply(adult$type_employer, factor)
adult$income <- sapply(adult$income, factor)
# Check for missing values and impute if necessary
func6 <- function(df) {
for (i in colnames(df)) {
df[[i]][df[[i]] %in% c('?', ' ?', '? ')] <- NA
}
return(df)
}
# Apply the function to handle missing values
adult <- func6(adult)
# Display the missing data visualization
table(adult$type_employer)
missmap(adult, y.at = c(1), y.labels = c(''), col = c('yellow', 'black'))
# Remove rows with missing values
adult <- na.omit(adult)
# Display the missing data visualization after handling missing values
str(adult)
missmap(adult, y.at = c(1), y.labels = c(''), col = c('yellow', 'black'))
# Explore and visualize the data
ggplot(adult, aes(x = age)) + geom_histogram(aes(fill = income), color = 'black', binwidth = 1) + theme_bw()
ggplot(adult, aes(x = hr_per_week), colors = income) + geom_histogram(color = 'black', binwidth = 1) + theme_bw()
# Rename the 'country' column to 'Region'
colnames(adult)[14] <- 'Region'
# Plot a bar chart of income by region
ggplot(adult, aes(x = Region)) + geom_bar(aes(fill = income), color = 'black') +
theme_bw() + theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Split the dataset into training and testing sets
sample <- sample.split(adult$age, SplitRatio = 0.7)
train <- subset(adult, sample == TRUE)
test <- subset(adult, sample == FALSE)
# Build a logistic regression model
model <- glm(income ~ ., family = binomial(logit), data = train)
# Display the summary of the model
summary(model)
# Stepwise variable selection
model.2 <- step(model)
# Make predictions on the test set
test$predicted.income <- predict.lm(model, newdata = test, type = 'response')
# Create a confusion matrix and calculate accuracy, recall, and precision
conf_matrix <- table(test$predicted.income > 0.5, test$income)
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
recall <- conf_matrix[2, 2] / sum(conf_matrix[, 2])
precision <- conf_matrix[2, 2] / sum(conf_matrix[2, ])
# Display the evaluation metrics
print(paste('Accuracy:', accuracy))
print(paste('Recall:', recall))
print(paste('Precision:', precision))
# Load necessary libraries
library(dplyr)
library(Amelia)
library(ggplot2)
library(caTools)
# Read the CSV file
adult <- read.csv('adult_sal.csv')
# View the first few rows of the dataset
head(adult)
# Remove unnecessary column 'X'
adult <- select(adult, -X)
# Display the structure and summary of the dataset
str(adult)
summary(adult)
# Explore and handle missing values in 'type_employer' column
table(adult$type_employer)
sum(is.na(adult$type_employer))
# Create functions to recode 'type_employer' values
func1 <- function(col1) {
col1[col1 %in% c('Never-worked', 'Without-pay')] <- 'Unemployed'
return(col1)
}
func2 <- function(col1) {
col1[col1 %in% c('State-gov', 'Local-gov')] <- 'SL-gov'
return(col1)
}
func3 <- function(col1) {
col1[col1 %in% c('Self-emp-inc', 'Self-emp-not-inc')] <- 'self-emp'
return(col1)
}
# Apply the functions to 'type_employer'
adult$type_employer <- sapply(adult$type_employer, func1)
adult$type_employer <- sapply(adult$type_employer, func2)
adult$type_employer <- sapply(adult$type_employer, func3)
# Display the updated table
table(adult$type_employer)
# Explore and handle missing values in 'marital' column
table(adult$marital)
# Create function to recode 'marital' values
func4 <- function(col1) {
col1[col1 %in% c('Married-AF-spouse', 'Married-civ-spouse', 'Married-spouse-absent')] <- 'Married'
col1[col1 %in% c('Divorced', 'Separated', 'Widowed')] <- 'Not-Married'
return(col1)
}
# Apply the function to 'marital'
adult$marital <- sapply(adult$marital, func4)
# Display the updated table
table(adult$marital)
# Explore and handle missing values in 'country' column
table(adult$country)
# Create function to recode 'country' values
func5 <- function(country) {
# Define categories for different regions
asia <- c('Cambodia', 'China', 'Hong', 'India', 'Iran', 'Japan', 'Laos', 'Philippines', 'Taiwan', 'Thailand', 'Vietnam')
europe <- c('England', 'France', 'Germany', 'Greece', 'Hungary', 'Ireland', 'Italy', 'Poland', 'Portugal', 'Scotland', 'Yugoslavia')
latin_and_south_america <- c('Columbia', 'Cuba', 'Dominican-Republic', 'Ecuador', 'El-Salvador', 'Guatemala', 'Haiti', 'Honduras', 'Mexico', 'Nicaragua', 'Peru', 'Trinadad&Tobago')
north_america <- c('Canada', 'United-States')
other <- c('?', 'Holand-Netherlands', 'Outlying-US(Guam-USVI-etc)', 'Puerto-Rico')
# Recode 'country' values based on regions
if (country %in% asia) {
return('Asia')
} else if (country %in% europe) {
return('Europe')
} else if (country %in% latin_and_south_america) {
return('Latin.and.South.America')
} else if (country %in% north_america) {
return('North.America')
} else if (country %in% other) {
return('Other')
} else {
return('Unknown')
}
}
# Apply the function to 'country'
adult$country <- sapply(adult$country, func5)
# Display the updated table
table(adult$country)
# Convert categorical variables to factors
str(adult)
adult$marital <- sapply(adult$marital, factor)
adult$education <- sapply(adult$education, factor)
adult$occupation <- sapply(adult$occupation, factor)
adult$relationship <- sapply(adult$relationship, factor)
adult$race <- sapply(adult$race, factor)
adult$sex <- sapply(adult$sex, factor)
adult$type_employer <- sapply(adult$type_employer, factor)
adult$income <- sapply(adult$income, factor)
# Check for missing values and impute if necessary
func6 <- function(df) {
for (i in colnames(df)) {
df[[i]][df[[i]] %in% c('?', ' ?', '? ')] <- NA
}
return(df)
}
# Apply the function to handle missing values
adult <- func6(adult)
# Display the missing data visualization
table(adult$type_employer)
missmap(adult, y.at = c(1), y.labels = c(''), col = c('yellow', 'black'))
# Remove rows with missing values
adult <- na.omit(adult)
# Display the missing data visualization after handling missing values
str(adult)
missmap(adult, y.at = c(1), y.labels = c(''), col = c('yellow', 'black'))
# Explore and visualize the data
ggplot(adult, aes(x = age)) + geom_histogram(aes(fill = income), color = 'black', binwidth = 1) + theme_bw()
ggplot(adult, aes(x = hr_per_week), colors = income) + geom_histogram(color = 'black', binwidth = 1) + theme_bw()
# Rename the 'country' column to 'Region'
colnames(adult)[14] <- 'Region'
# Plot a bar chart of income by region
ggplot(adult, aes(x = Region)) + geom_bar(aes(fill = income), color = 'black') +
theme_bw() + theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Split the dataset into training and testing sets
sample <- sample.split(adult$age, SplitRatio = 0.7)
train <- subset(adult, sample == TRUE)
test <- subset(adult, sample == FALSE)
# Build a logistic regression model
model <- glm(income ~ ., family = binomial(logit), data = train)
# Display the summary of the model
summary(model)
# Stepwise variable selection
model.2 <- step(model)
# Make predictions on the test set
test$predicted.income <- predict.lm(model, newdata = test, type = 'response')
# Create a confusion matrix and calculate accuracy, recall, and precision
conf_matrix <- table(test$predicted.income > 0.5, test$income)
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
recall <- conf_matrix[2, 2] / sum(conf_matrix[, 2])
precision <- conf_matrix[2, 2] / sum(conf_matrix[2, ])
# Display the evaluation metrics
print(paste('Accuracy:', accuracy))
print(paste('Recall:', recall))
print(paste('Precision:', precision))
